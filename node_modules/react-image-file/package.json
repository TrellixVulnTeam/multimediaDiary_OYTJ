{
  "_args": [
    [
      {
        "raw": "react-image-file",
        "scope": null,
        "escapedName": "react-image-file",
        "name": "react-image-file",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/vibhavjagwani/Documents/GitHub/multimediaDiary"
    ]
  ],
  "_from": "react-image-file@latest",
  "_id": "react-image-file@0.1.0",
  "_inCache": true,
  "_location": "/react-image-file",
  "_nodeVersion": "5.2.0",
  "_npmUser": {
    "name": "xananax",
    "email": "xananax@yelostudio.com"
  },
  "_npmVersion": "3.5.2",
  "_phantomChildren": {
    "core-js": "1.2.7",
    "envify": "3.4.1",
    "loose-envify": "1.3.1",
    "promise": "7.3.1",
    "ua-parser-js": "0.7.17"
  },
  "_requested": {
    "raw": "react-image-file",
    "scope": null,
    "escapedName": "react-image-file",
    "name": "react-image-file",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-image-file/-/react-image-file-0.1.0.tgz",
  "_shasum": "8c845899dda1e1c2fdbd2422db54eb0dc9b85f65",
  "_shrinkwrap": null,
  "_spec": "react-image-file",
  "_where": "/Users/vibhavjagwani/Documents/GitHub/multimediaDiary",
  "author": {
    "name": "xananax@yelostudio.com"
  },
  "bugs": {
    "url": "https://github.com/Xananax/react-image/issues"
  },
  "dependencies": {
    "react": "^0.14.3"
  },
  "description": "An image component that accepts blobs (as returned, from example, from couchdb) and file objects (such as the ones uploaded in the browser)",
  "devDependencies": {
    "babel-cli": "^6.2.0",
    "babel-core": "^6.2.0",
    "babel-loader": "^6.2.0",
    "babel-preset-es2015": "^6.1.18",
    "babel-preset-react": "^6.1.18",
    "babel-preset-stage-0": "^6.1.18",
    "chai": "^3.4.1",
    "classnames": "^2.2.0",
    "css-loader": "^0.23.0",
    "domready": "^1.0.8",
    "mocha": "^2.3.4",
    "react": "^0.14.3",
    "react-dom": "^0.14.3",
    "react-hot-loader": "^1.3.0",
    "style-loader": "^0.13.0",
    "stylus-loader": "^1.4.2",
    "webpack": "^1.12.6",
    "webpack-dev-server": "1.12.1"
  },
  "directories": {
    "example": "example"
  },
  "dist": {
    "shasum": "8c845899dda1e1c2fdbd2422db54eb0dc9b85f65",
    "tarball": "https://registry.npmjs.org/react-image-file/-/react-image-file-0.1.0.tgz"
  },
  "gitHead": "279a8fe91408f55963bcae25a9b7a292d78d1fc4",
  "homepage": "https://github.com/Xananax/react-image#readme",
  "keywords": [
    "react",
    "image",
    "file",
    "blob",
    "upload"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "xananax",
      "email": "xananax@yelostudio.com"
    }
  ],
  "name": "react-image-file",
  "optionalDependencies": {},
  "readme": "# React-Image-File\n\nAn image component that accepts blobs (as returned, from example, from couchdb) and file objects (such as the ones uploaded in the browser)\n\n# Usage\n\n```sh\nnpm install react-image-file\n```\n\n```js\nimport Image from 'react-image';\n\n<Image file={file} alt='some text'/>\n\n```\n\n`file` can be either a Blob, a File, or a src string.\n\nOther useful props:\n- `template` decides which template is rendered. This must be a valid React component. The template receives the following props:\n    + `src`: a string (either the string passed in `file`, or a base-64 representation of the Blob/File)\n    + `alt`: the string passed in `alt`, or a filename if available (on `File` objects only)\n    + `imgWidth`: the width of the loaded image\n    + `imgHeight`: the height of the loaded image\n    + `...` and all other props passed to `Image`.\n\nThe following props are consumed by the default template, and are passed down from `Image`:\n- `src`: a valid string (automatically handled by `Image`)\n- `alt`: a string\n- `loadingURL`: an image URL to display while loading an image\n- `errorURL`: an image URL to display in case of error\n- `emptyURL`:an image URL to display when nothing is loading yet\n- `status`: one of `EMPTY`, `DONE`, `LOADING`, or `ERROR`. This is handled automatically by `Image`\n- `width`: width of the image\n- `height`: height of the image\n- `crop`: one of `contain`, `cover`, or `null`. Defaults to `contain`.\n- `type`: one of `div` or `img`. Note that choosing `img` will nullify any effect of `crop` (there is no handling of automatic resizing of an image tag). Defaults to `div`.\n\nYou also get, for free, an `UploadField` and an `ImageUploadField` components, but they're very raw at the moment, so it is advised to use them as a starting point only. In case you want to use them:\n\n```js\nimport {ImageUploadField,UploadField} from 'react-image'\n\n<ImageUploadField\n    label='upload images'\n    imageWidth={50} \n    imageHeight={50} \n    multiple \n    onChange={(files)=>this.setState({files:files})} \n    files={this.state.files}\n/>\n```\n\n\n# License\n\nMIT",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Xananax/react-image.git"
  },
  "scripts": {
    "clean": "rm -rf ./lib/* && rm -rf npm-debug.log",
    "compile": "npm run clean && npm run es5",
    "es5": "node ./node_modules/.bin/babel ./src -d ./lib",
    "hot": "node hotServer.js",
    "start": "webpack-dev-server --hot --inline --config webpack/server.js"
  },
  "version": "0.1.0"
}
